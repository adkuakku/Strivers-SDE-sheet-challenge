//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {

  private:
  bool dfs(int node, int parent, vector<int> adj[], int visited[])
  {
      visited[node] = 1;
      for(auto i : adj[node])
      {
          if(visited[i] == 0)
          {
              if(dfs(i, node, adj, visited) == true)
              return true;
          }
          else if(i != parent) // that means i is visited and is not the parent node of 
                               //previous node
          {
              return true;
          }
      }
      return false;
  }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int visited[V] = {0};
        
        // to handle multiple disconnected components of graph 
        for(int i = 0; i<V; i++)
        {
            if(!visited[i])
            {
                if(dfs(i, -1, adj, visited))
                return true;
            }
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends