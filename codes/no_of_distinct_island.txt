//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  private:
  void dfs(int row, int col, vector<vector<int>>& grid, vector<vector<int>> &visited, 
  vector<pair<int, int>> &vec, int row0, int col0){
      int n = grid.size();
      int m = grid[0].size();
      visited[row][col] = 1;
      vec.push_back({row - row0, col - col0}); // (row0, col0) is base index
      
      int delrow[] = {-1, 0, +1, 0};
      int delcol[] = {0, -1, 0, +1};
      for(int i =0; i<4; i++) {
          int nrow = row + delrow[i];
          int ncol = col + delcol[i];
          if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m
          && !visited[nrow][ncol] && grid[nrow][ncol] == 1) {
              dfs(nrow, ncol, grid, visited, vec, row0, col0);
          }
      }
  }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n = grid.size();
        int m = grid[0].size();
        // visited matrix
        vector<vector<int>> visited(n, vector<int>(m,0));
        //set to store the set of index forming island...any duplicate element will be automatically discarded
        set<vector<pair<int, int>>> st;
        //dfs traverse
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<m; j++) {
                if(!visited[i][j] && grid[i][j] == 1) {  //it should be not visited and it should also be a land to perform bfs traversal
                   //vector which store all pairs of index which form the island
                   vector<pair<int, int>> vec;
                   dfs(i, j, grid, visited, vec, i, j);
                   st.insert(vec);
                }
            }
        }
        return st.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends